// CSCI MC RISKS

1) Printing a non-User Piece square on the Game board

One of the biggest risks that I had to overcome in this project was printing a non-user Piece game board.
One of the bigger challenges relating to this issue was actually printing to the board in the first place 
without substantially changing the game board itself.  To solve this problem, I found that all I had to do 
was set isEmpty to false.  Once this had been done, a square with the default color, pink appeared.  
Furthermore, this square reported a collision with the isBoardBlock collision method when a piece ran
into said square.  Thus, with the addition of a method in the VBTetrisPowerUp class, I was easily able to 
detect when a piece collided with a power up.  Removing this piece from the board was just as simple; all
I had to do was set the isEmpty of the block containing the power up back to true.  Unfortunately, the implementation
did not end here; during game play testing I noticed that random lines of blocks of the default pink color would 
appear stretching from the bottom of the game play area to the top.  Furthermore, these lines were persistent 
and would not go away.  In attempting to solve this problem I was able to deduce that these lines were being generated by    
power ups being put on the game board.  To solve this problem, I simply emptied the game board of all blocks that 
had the default ownership of 0.  Thus, I solved this problem and overcame this risk.

2) Getting multiple actions to occur for a single power up.

When I was implementing several of the power ups I found that said power ups required multiple stages
to complete.  However, I needed to implement several power ups with the possibility of including even more
in the future.  Thus, any solutions I came up with would have to be able to handle any type and number of power 
ups. For this reason,     sss