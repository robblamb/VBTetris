Virtual Boy Tetris GLOSSARY

This document is a glossary for terms, methods, objects, and any other possible sources of confusion.
The authors are Team Virtual Boy, from CSCI 331, Fall 2013, for Dr. J Beeston
Authors: Matthew Cormons, Robert Lamb, Eli Reale.  The entries within this section were collectively
created and decided upon.


Background (ER):
	A static image that sits behind the game board. It can be changed dynamically but it does not effect
	the gameplay in any way. It is purely for aesthetics.
	
Block (ER):
	A VBTetrisBlock object is a single square unit and is essentially the building block of the game, as
	the game board, game pieces and powerups are all comprised of these blocks. Each VBTetrisBlock knows
	if it is empty, what Tetriminoe it belongs to, what player owns it, and its position on the board.

Environment:
	The game environment is held within a class VBTetrisEnvrinment
	This class is responsible for holding images, colours, sounds.
	Each level will have a set of images, colours, and sounds, and
	the environment will keep track of the current level
	
GameBoard
	The Area that the game pieces will be confined to,
	the area that lines are created and removed,
	the area that is constantly updated
	
GamePiece:
	An object that belongs to a player while falling,
	the game pieces can be moved and rotated while active.
	An active game piece has not come to rest on top of
	inactive game pieces, or the bottom of the game board
	A piece that has hit the bottom or pieces that are inactive, 
	becomes inactive (glues to the board)
	
Key Adapter:
	The VBTetris game has several key adapter working.  
	One, a private class of game board, simply monitors pausing conditions
	The VBTetris Adapters have a base class: VBTetrisKeyAdapter, and extended classes
	for Arrow and wasd key sets. The adapters hold a player object to know which
	piece to move around the board, and a PieceMover Object that interacts with the
	board on behalf of the key adapter.

Kill Line (RL):
	The line that when a piece comes to rest on/above it, 
	part of the board will be "killed"-> lines/blocks 
	removed.

NUM_PLAYERS:
	is the constant integer that represents the number of players in the tetris game.

Piece (ER):
	A piece is an instance of VBTetrisPiece and is comprised of 9 VBTetrisBlock objects.
	It has an owner, a shape, and it knows how to rotate itself.
	It’s shape must be one of the preset Tetriminoes defined within its class.

Piece Mover (RL):
	A class that acts as a message passer between a KeyAdapter and the GameBoard.  The Key adapter will request
	a move from the piece mover, and the piece mover will relay that request to the board object.

Player(RL):
	A VBTetris Player is an active player of the game.  
	The player will have a designated colour that ALL of his/her pieces will be, a score, a number of lines scored,
	and a set of keys used to move his/her pieces.
	
Player Pane:
	An area of the visual game space used for presenting the user with information on players.  This area shows 
	the score of each player, the number of lines scored, and the next piece for that player.  The area is 
	coloured the same as the player's pieces for easy identification.
	
Powerups:
	Special single block pieces will appear on the game board. These are powerups and when a player collides
	with them, they get the powerup.
	
Shape:
	An enumerated type referring to the type of shape that the blocks make up. examples, squares and L shapes.
	
Tetriminoe:
	A tetris piece. Players use them to complete lines.
	
Tetriminoes: 
	an enumerated data type to help distinguish between the different types of shapes that a tetriminoe can be.
	Possible Shapes: EMPTY,	Z_SHAPE, S_SHAPE, LINE_SHAPE, T_SHAPE, SQUARE_SHAPE, L_SHAPE, MIRRORED_L_SHAPE

Timer(RL):
	The VBTetris Timer is used for updating the board on a given schedule.  The timer will cause an action event
	that triggers all players pieces to move down. Without this, the only movement a player would see is by 
	key presses alone.
	The timer will be updated (sped up) when a new level is reached, or a certain event takes place (like a score going
	above a preset level or the number of lines scored hits a preset level).

Singleton Tetrominoe (MC):
	A tetrominoe which consists of one and only one block.
	
Special Power (MC):
	An ability possessed by a tetrominoes that is not possessed by regular tetrominoes.

FireFly Tetrominoe (MC):
	A FireFly piece is a singleton tetrominoe which is provided to the user after colliding with the FireFly
	power up.  It has the special power that, during every 4 rotations, the piece moves right 1 space,
	up 1 space, left 1 space, and down 1 space for the 4 respective rotations.  This enables this piece
	to move around objects and is the only piece that can move upwards 1 space.
	
Extend Tetrominoe (MC):
	The extend piece is a singleton tetrominoe that is provided after colliding with the Extend
	power up.  It has the special power that, just before it becomes locked to the board, the 
	tetrominoe can add up to 8 singleton tetrominoes to its right side depending on how much empty
	board space exists to the right of the original player controlled tetrominoe.
	
Stop (MC):
	This is a power up that stops the player who collects it's piece from conducting the scheduled downward
	which all other pieces are subject to.  This power up lasts 10 seconds.

Quicken (MC):
	This is a power up that shortens the interval between every scheduled downward drop that all tetrominoes
	are subjected to.  It affects all players once collected and lasts for 10 seconds.
	
Lock (MC):
	A tetrominoe becomes locked to the board when it runs into either the bottom of the board or another block
	that has become locked.  Locking consists of copying the tetrominoe to the board and giving the player
	who was controlling it a new tetrominoe as long as the game has not ended.  It is on locking that all
	line removals and scoring is done.  It is also on locking that the Extend tetrominoe extends itself as 
	described in Extend Tetrominoe (MC). 

RULES:
	RL: The kill line is to be used to add a different level of complexity to the game and give new winning
		conditions.  Every time the kill line is hit by a player, that player will have their score reduced.
		Reducing the score may cause a player to lose the game.

	MC: At no point in time shall there be more than one power up, whether available to be collected or
		currently being used, on the game board. 

	MC: After every removal of a row all power ups that have not been collected and that are on the board
		will be removed from the board.

	MC: Power ups shall be placed on the board approximately 15% of the times that the power up selector is
		called.

	ER: tryMove (piece movement validation)
		When a player attempts to move an active piece, the game board must determine if the requested
		movement is valid. In other words, it must determine if requested movement will cause the piece
		to hit another player’s active piece, hit the bottom of the board, or move outside of the board’s
		boundaries. In order to validate a players requested movement, the tryMove method must be invoked.
		This method accepts the player (object) requesting the movement, the “moved” piece (object), the
		requested x position (int) and the requested y position (int) of the “moved” piece. With this
		information, the tryMove method can check each block in the “moved” piece and validate its position
		on the board. If tryMove cannot move the player’s piece, the reason why is returned and the “moved”
		piece is destroyed. Likewise, if tryMove can move the player’s piece, it returns that the movement
		was successful and sets the “moved” piece as the players current piece.
